#!/usr/bin/env ruby

#                         The MIT License
#
# Copyright (c) 2013 Marcelo Guimar√£es <ataxexe@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require_relative '../lib/yummi'
require 'optparse'

def get_input message, default, params = {}
  puts(message.colorize(:blue) << ": " << " [#{default}]".colorize(:yellow))
  input = gets.chomp
  return default if input.empty?
  return input.split(params[:split]) if params[:split]
  input
end

def get_script_params
  prefix = get_input "Function Prefix", "", :optional => true

  puts "Colors:".colorize(:bold_white)
  puts Yummi::Color::color_names.colorize(:yellow)
  colors = get_input "Colors to include", "all", :split => /\s*,\s*/
  colors = Yummi::Color::color_names if colors == "all"

  puts "Types:".colorize(:bold_white)
  puts Yummi::Color::type_names.colorize(:yellow)
  types = get_input "Types to include", "all", :split => /\s*,\s*/
  types = Yummi::Color::type_names if types == "all"
  
  include_numbers = get_input("Include color numbers?", "yes").downcase == "yes"
  {
    :function_prefix => prefix,
    :colors => colors,
    :types => types,
    :include_color_numbers => include_numbers
  }
end

@params = []

opt = OptionParser::new
opt.on '-c COLOR', '--color=COLOR', 'Colorize using the given color' do |color|
  @color = color
end
opt.on '-s STYLE', '--style=STYLE', Array, 'Sets the styles to use (bold, highlight, underline, blink, ...)' do |styles|
  @styles = styles
end
opt.on '-f FORMAT', '--format=FORMAT', 'Sets the format to use (a "%s" means the colorized message)' do |format|
  @format = format
end
opt.on '-p PATTERNS', '--pattern=PATTERNS', Array, 'Sets a pattern to colorize each line' do |patterns|
  @colorizer = Yummi::Colorizers.pattern(patterns)
end
opt.on '--log', 'Uses the default log pattern to colorize each line' do 
  @colorizer = Yummi::Colorizers.pattern :log
end
opt.on '-m message', '--message=MESSAGE', 'Colorize the given message' do |message|
  @message = message
end
opt.on '-t file', '--table=FILE', 'Defines the file mapping the table to print' do |file|
  @table_builder = Yummi::TableBuilder::new(file).defaults
end
opt.on '-d data', '--data=FILE', 'Defines the file containing the data to print' do |data|
  @data = File.expand_path(data)
end
opt.on '--data-type', 'Defines the data type to parse the values' do |data_type|
  @data_type = data_type
end
opt.on '-l FILES', '--load=FILES', Array, 'Include the files for extending components' do |files|
  files.each do |file|
    load File.expand_path(file)
  end
end
opt.on '--shell-script', 'Generates a shell script program to colorize texts without a ruby environment' do 
  abort "Environment not supported" unless Yummi::Color::supported?

  puts ".: Yummi shell script installation :.".colorize(:bold_yellow)
  name = get_input "Program name", "colorize"
  location = File.expand_path(get_input("Install location", "~/bin"))
  file = File.join(location, name)

  generator = Yummi::Generator::ShellScript::new get_script_params
  
  case get_input("Install as? (program, library)", "program").downcase.to_sym
  when :program
    generator.generate_program file
  when :library
    generator.generate_library file
  else
    puts "Invalid mode!"
    exit 1
  end
  puts "Done!".colorize(:bold_green)
  exit 0
end
opt.on '-h', '--help', 'Display this help message' do
  puts opt
  exit 0
end

if ARGV.empty?
  puts opt
  exit 0
end

opt.parse! ARGV

def print_out message
  output_text = if @color
    Yummi::colorize message, @color, @styles
  elsif @colorizer
    @colorizer.colorize message
  end
  output_text = "#{@format}" % output_text if @format
  puts output_text
end

if @message
  print_out @message
elsif @table_builder
  abort "Please give the data to print" unless @data
  table = @table_builder.build_table
  extension = File::extname(@data)[1..-1]
  type = (@data_type or extension).to_sym
  if Yummi::DataParser.respond_to? type
    table.data = Yummi::DataParser.send(type, File.read(@data))
  else
    abort "Unsupported extension #{extension}"
  end
  puts table
else
  begin
    ARGF.each_line do |line|
      print_out line.chomp
    end
  rescue Interrupt
    puts Yummi::colorize("Aborted!", :red)
  end
end
