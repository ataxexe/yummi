#!/usr/bin/env ruby

#                         The MIT License
#
# Copyright (c) 2011 Marcelo Guimar√£es <ataxexe@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require_relative '../lib/yummi'
require 'optparse'

@params = []

opt = OptionParser::new
opt.on '-c COLOR', '--color=COLOR', 'Colorize using the given color' do |color|
  @color = color
end
opt.on '-p PATTERN', '--pattern=PATTERN', 'Sets a pattern to colorize each line' do |pattern|
  @colorizer = Yummi::Colorizers.line pattern
end
opt.on '-m message', '--message=MESSAGE', 'Colorize the given message' do |message|
  @message = message
end
opt.on '-t file', '--table=FILE', 'Defines the file mapping the table to print' do |file|
  @table_builder = Yummi::TableBuilder::new(file).defaults
end
opt.on '-d data', '--data=FILE', 'Defines the file containing the data to print' do |data|
  @data = File.expand_path(data)
end
opt.on '-e FILES', '--eval=FILES', Array, 'Sets a file to eval for extending components' do |files|
  files.each do |file|
    load File.expand_path(file)
  end
end
opt.on '-h', '--help', 'Display this help message' do
  puts opt
  exit 0
end

if ARGV.empty?
  puts opt
  exit 0
end

opt.parse! ARGV

def print_out message
  if @color
    puts Yummi::colorize message, @color
  elsif @colorizer
    puts @colorizer.colorize message
  end
end

if @message
  print_out @message
elsif @table_builder
  abort "Please give the data to print" unless @data
  table = @table_builder.build_table
  extension = File::extname(@data)
  table.data = case extension
  when ".yaml"
    YAML::load_file(@data)
  when ".csv"
    require 'csv'
    CSV::parse(File.read(@data), :converters => :all)
  else
    abort "Unsupported extension #{extension}"
  end
  puts table
else
  begin
    ARGF.each_line do |line|
      print_out line.chomp
    end
  rescue Interrupt
    #Do nothing
  end
end
